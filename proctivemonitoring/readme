# Take a look the Cluster-IP/NodePort with respect to RabbitMq in the Cluster K8s
# kubectl --namespace="test-rabbitmq"

# Remenber to use kubectl config set-context --current --namespace=test-rabbitmq
# The protocol amqp must be verified by executing "kubectl describe service rabbitmq"    --- e.g. amqp://guest:guest@172.17.0.3:5672/%2f'
# api rest
docker build -t proactivemonitoring-python-version .
docker tag proactivemonitoring-python-version californibrs/proactivemonitoring-python-version
docker push californibrs/proactivemonitoring-python-version
# (dont use -- only during developing) docker run -it --rm -p 3000:80 proactivemonitoring-python-version

# data receiver
docker build -t proactivemonitoring-receiver-python-version .
docker tag proactivemonitoring-receiver-python-version californibrs/proactivemonitoring-receiver-python-version
docker push californibrs/proactivemonitoring-receiver-python-version
# (dont use -- only during developing) docker run -it --rm -p 3000:80 proactivemonitoring-receiver-python-version


# In order to test a forwaing message, it is necessary to stop the "receiver service"
kubectl scale --replicas=0 deployment/selfdiagnosis-receiver-deployment

# to return the test of receiving:
kubectl scale --replicas=1 deployment/selfdiagnosis-receiver-deployment